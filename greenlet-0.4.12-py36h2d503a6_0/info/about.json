{
  "channels": [
    "local",
    "local"
  ],
  "conda_build_version": "3.0.15+50.g6024f3f",
  "conda_private": false,
  "conda_version": "4.3.21",
  "description": "The greenlet package is a spin-off of Stackless, a version of CPython that\nsupports micro-threads called \"tasklets\". Tasklets run pseudo-concurrently\n(typically in a single or a few OS-level threads) and are synchronized with\ndata exchanges on \"channels\".\n\nA \"greenlet\", on the other hand, is a still more primitive notion of\nmicro-thread with no implicit scheduling; coroutines, in other words. This\nis useful when you want to control exactly when your code runs. You can\nbuild custom scheduled micro-threads on top of greenlet; however, it seems\nthat greenlets are useful on their own as a way to make advanced control\nflow structures. For example, we can recreate generators; the difference\nwith Python's own generators is that our generators can call nested\nfunctions and the nested functions can yield values too. Additionally,\nyou don't need a \"yield\" keyword. See the example in\ntests/test_generator.py.\n\nGreenlets are provided as a C extension module for the regular unmodified\ninterpreter.\n\nGreenlets are lightweight coroutines for in-process concurrent programming.\n",
  "dev_url": "https://github.com/python-greenlet/greenlet",
  "doc_url": "https://greenlet.readthedocs.io",
  "env_vars": {
    "CIO_TEST": "<not set>",
    "CONDA_DEFAULT_ENV": "root",
    "CONDA_ENVS_PATH": "<not set>",
    "LD_LIBRARY_PATH": "<not set>",
    "PATH": "/opt/conda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
    "PYTHONHOME": "<not set>",
    "PYTHONPATH": "<not set>"
  },
  "home": "https://github.com/python-greenlet/greenlet",
  "license": "MIT",
  "license_family": "MIT",
  "root_pkgs": [
    "libffi 3.2.1 1",
    "asn1crypto 0.22.0 py36_0",
    "filelock 2.0.7 py36_0",
    "patchelf 0.9 0",
    "tk 8.5.18 0",
    "beautifulsoup4 4.6.0 py36_0",
    "xz 5.2.2 1",
    "ruamel_yaml 0.11.14 py36_1",
    "cryptography 1.8.1 py36_0",
    "conda-verify 2.0.0 py36_0",
    "pyyaml 3.12 py36_0",
    "requests 2.14.2 py36_0",
    "openssl 1.0.2l 0",
    "python 3.6.1 2",
    "yaml 0.1.6 0",
    "wheel 0.29.0 py36_0",
    "pytz 2017.2 py36_0",
    "setuptools 27.2.0 py36_0",
    "pyopenssl 17.0.0 py36_0",
    "zlib 1.2.8 3",
    "jinja2 2.9.6 py36_0",
    "pycparser 2.17 py36_0",
    "packaging 16.8 py36_0",
    "pycosat 0.6.2 py36_0",
    "anaconda-client 1.6.3 py36_0",
    "pip 9.0.1 py36_1",
    "readline 6.2 2",
    "sqlite 3.13.0 0",
    "idna 2.5 py36_0",
    "pyparsing 2.1.4 py36_0",
    "cffi 1.10.0 py36_0",
    "conda-env 2.6.0 0",
    "python-dateutil 2.6.1 py36_0",
    "glob2 0.5 py36_0",
    "markupsafe 1.0 py36_0",
    "conda 4.3.21 py36_0",
    "clyent 1.2.2 py36_0",
    "six 1.10.0 py36_0"
  ],
  "summary": "Lightweight in-process concurrent programming"
}